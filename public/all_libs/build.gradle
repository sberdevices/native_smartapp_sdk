plugins {
    id 'com.android.library'
    id 'com.kezong.fat-aar'
}

apply from: "$rootProject.projectDir/android_subproject.gradle"

fataar {
    /**
     * If transitive is true, we embed not only our libs, but also their dependencies. It may be needed for unity build
     */
    transitive = false
}

afterEvaluate {
    // for app test, copy the final aar to demo app
    android.libraryVariants.all { variant ->
        File outputFile = variant.outputs.first().outputFile
        tasks.named("assemble${variant.name.capitalize()}").configure {
            doLast {
                copy {
                    from outputFile
                    into "$rootProject.projectDir/demo"
                    rename outputFile.name, "fat-aar-all-libs.aar"
                }
            }
        }
    }
}

dependencies {
    embed project(path: ':public:common:asserts', configuration: 'default')
    embed project(path: ':public:common:binderhelper:api', configuration: 'default')
    embed project(path: ':public:common:binderhelper:impl', configuration: 'default')
    embed project(path: ':public:common:camera', configuration: 'default')
    embed project(path: ':public:common:coroutines', configuration: 'default')
    embed project(path: ':public:common:logger', configuration: 'default')

    embed project(path: ':public:services:mic_camera_state:api', configuration: 'default')
    embed project(path: ':public:services:mic_camera_state:aidl', configuration: 'default')
    embed project(path: ':public:services:mic_camera_state:impl', configuration: 'default')

    embed project(path: ':public:services:appstate:aidl', configuration: 'default')
    embed project(path: ':public:services:appstate:api', configuration: 'default')
    embed project(path: ':public:services:appstate:impl', configuration: 'default')

    embed project(path: ':public:services:messaging:aidl', configuration: 'default')
    embed project(path: ':public:services:messaging:api', configuration: 'default')
    embed project(path: ':public:services:messaging:impl', configuration: 'default')

    embed project(path: ':public:cv:aidl', configuration: 'default')
    embed project(path: ':public:cv:api', configuration: 'default')
    embed project(path: ':public:cv:entity', configuration: 'default')
    embed project(path: ':public:cv:impl', configuration: 'default')
    embed project(path: ':public:cv:proto', configuration: 'default')
    embed project(path: ':public:cv:util', configuration: 'default')
}